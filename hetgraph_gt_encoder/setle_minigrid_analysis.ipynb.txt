{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bc6bb66b",
   "metadata": {},
   "source": [
    "# SETLE + MiniGrid Graph Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e07792e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# SETLE-Based Graph Analysis for MiniGrid (Neo4j)\n",
    "# ================================================\n",
    "\n",
    "from neo4j import GraphDatabase\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# --- Neo4j Connection ---\n",
    "def connect_neo4j(uri: str, user: str, password: str):\n",
    "    return GraphDatabase.driver(uri, auth=(user, password))\n",
    "\n",
    "# --- Fetch Affordance Transitions ---\n",
    "def fetch_affordance_transitions(driver) -> pd.DataFrame:\n",
    "    query = \"\"\"\n",
    "    MATCH (e:Episode)-[r1:has_state]->(s1:State)-[:influences]->(a:Affordance)-[:outcome]->(s2:State)<-[r2:has_state]-(e)\n",
    "    WHERE r2.time = r1.time + 1\n",
    "    OPTIONAL MATCH (s1)-[:has_object]->(o:Object)\n",
    "    RETURN \n",
    "      e.id AS episode_id,\n",
    "      r1.time AS timestep,\n",
    "      collect(DISTINCT o.clip_label) AS visible_objects,\n",
    "      a.name AS affordance_name,\n",
    "      r2.time AS resulting_timestep,\n",
    "      e.successful_outcome AS success\n",
    "    ORDER BY episode_id, timestep\n",
    "    \"\"\"\n",
    "    with driver.session() as session:\n",
    "        result = session.run(query)\n",
    "        data = [record.data() for record in result]\n",
    "    return pd.DataFrame(data)\n",
    "\n",
    "# --- Compute Affordance Success Rates ---\n",
    "def compute_affordance_success(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    grouped = df.groupby(['affordance_name', 'success']).size().unstack(fill_value=0)\n",
    "    grouped['success_rate'] = grouped.get(True, 0) / (grouped.get(True, 0) + grouped.get(False, 0))\n",
    "    return grouped.sort_values(by='success_rate', ascending=False)\n",
    "\n",
    "# --- Common Object-Affordance Pairs in Successful Episodes ---\n",
    "def common_successful_pairs(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    success_df = df[df['success'] == True]\n",
    "    expanded_rows = []\n",
    "    for _, row in success_df.iterrows():\n",
    "        for obj in row['visible_objects']:\n",
    "            expanded_rows.append({'object': obj, 'affordance': row['affordance_name']})\n",
    "    expanded_df = pd.DataFrame(expanded_rows)\n",
    "    return expanded_df.value_counts().reset_index(name='count').sort_values(by='count', ascending=False)\n",
    "\n",
    "# --- Trace Object Trajectories Across Time ---\n",
    "def object_trajectories(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    exploded = df.explode('visible_objects')\n",
    "    return exploded.groupby(['episode_id', 'visible_objects'])['timestep'].apply(list).reset_index()\n",
    "\n",
    "# --- Visualisation Example ---\n",
    "def plot_affordance_success(aff_df: pd.DataFrame):\n",
    "    aff_df = aff_df.reset_index()\n",
    "    plt.figure(figsize=(10,6))\n",
    "    sns.barplot(data=aff_df, x='affordance_name', y='success_rate')\n",
    "    plt.xticks(rotation=45, ha='right')\n",
    "    plt.title('Affordance Success Rates')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
